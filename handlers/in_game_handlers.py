from aiogram import Router, F, Bot
from aiogram.types import Message
# from aiogram.filters import Command
from config import users
from handlers import keyboards as kb


router_in_game = Router()


@router_in_game.message(F.text == '–ö–∞–º–µ–Ω—å')
@router_in_game.message(F.text == '–ù–æ–∂–Ω–∏—Ü—ã')
@router_in_game.message(F.text == '–ë—É–º–∞–≥–∞')
async def game(message: Message, bot: Bot):

    user = message.from_user.id
    if users[user]['status'] == 2:
        utake = users[user]['versus']['take'] = message.text
        rid = users[user]['versus']['rid']
        rtake = users[rid]['versus']['take']

        if rtake == '':
            await message.answer('–°–æ–ø–µ—Ä–Ω–∏–∫ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä')
            return

        result = ["–ù–∏—á—å—èü§ù", "–ü–æ–±–µ–¥–∞üèÜ", "–ü–æ—Ä–∞–∂–µ–Ω–∏–µüò¢"]
        result_to_write = ['draws', 'wins', 'loses']
        utake_int, rtake_int = chek_the_winner(utake=utake, rtake=rtake)

        users[user]['stats'][result_to_write[utake_int]] += 1
        users[rid]['stats'][result_to_write[rtake_int]] += 1
        users[user]['versus']['res'] = result[utake_int]
        users[rid]['versus']['res'] = result[rtake_int]

        for player in [user, rid]:
            users[player]['versus']['retry'] = False
            await bot.send_message(
                chat_id=player,
                text=f'{users[user]["name"]} - {utake}\n'
                     f'{users[rid]["name"]} - {rtake}\n'
                     f'{users[player]["versus"]["res"]}',
                reply_markup=kb.create_markup(btn_text=["–†–µ–≤–∞–Ω—à", "–í—ã—Ö–æ–¥"])
            )

            users[player]['versus']['take'] = ''
            users[player]['versus']['res'] = ''
    else:
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∏–≥—Ä—ã, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start")


@router_in_game.message(F.text == '–†–µ–≤–∞–Ω—à')
async def retry(message: Message, bot: Bot):
    user = message.from_user.id
    rid = users[user]['versus']['rid']
    users[user]['versus']['retry'] = True

    if not users[rid]['versus']['retry']:
        await message.reply('–û—à–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...')
        await bot.send_message(
            chat_id=rid,
            text='–°–æ–ø–µ—Ä–Ω–∏–∫, —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑.\n'
                 '–ù–∞–∂–º–∏—Ç–µ "–†–µ–≤–∞–Ω—à", –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑.'
        )
        return

    for plyer in [user, rid]:
        await bot.send_message(
            chat_id=plyer,
            text='–î–µ–ª–∞–µ–º –≤—ã–±–æ—Ä: ',
            reply_markup=kb.create_markup(
                            btn_text=['–ö–∞–º–µ–Ω—å', '–ù–æ–∂–Ω–∏—Ü—ã', '–ë—É–º–∞–≥–∞']
                            )
        )


@router_in_game.message(F.text)
async def chat(message: Message, bot: Bot):
    user = message.from_user.id
    if users[user]['status'] != 2:
        return
    await bot.send_message(
        chat_id=users[user]['versus']['rid'],
        text=f'{users[user]["name"]}: {message.text}'
    )


def chek_the_winner(utake: str, rtake: str):
    if (
        (utake == '–ö–∞–º–µ–Ω—å' and rtake == '–ù–æ–∂–Ω–∏—Ü—ã') or
        (utake == '–ù–æ–∂–Ω–∏—Ü—ã' and rtake == '–ë—É–º–∞–≥–∞') or
        (utake == '–ë—É–º–∞–≥–∞' and rtake == '–ö–∞–º–µ–Ω—å')
    ):
        return 1, -1
    elif (
        (utake == '–ö–∞–º–µ–Ω—å' and rtake == '–ë—É–º–∞–≥–∞') or
        (utake == '–ù–æ–∂–Ω–∏—Ü—ã' and rtake == '–ö–∞–º–µ–Ω—å') or
        (utake == '–ë—É–º–∞–≥–∞' and rtake == '–ù–æ–∂–Ω–∏—Ü—ã')
    ):
        return -1, 1
    elif (
        (utake == '–ö–∞–º–µ–Ω—å' and rtake == '–ö–∞–º–µ–Ω—å') or
        (utake == '–ù–æ–∂–Ω–∏—Ü—ã' and rtake == '–ù–æ–∂–Ω–∏—Ü—ã') or
        (utake == '–ë—É–º–∞–≥–∞' and rtake == '–ë—É–º–∞–≥–∞')
    ):
        return 0, 0
